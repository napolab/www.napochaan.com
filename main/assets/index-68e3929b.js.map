{"version":3,"file":"index-68e3929b.js","sources":["../../node_modules/budoux/module/data/models/ja.js","../../node_modules/budoux/module/dom-browser.js","../../node_modules/budoux/module/html_processor.js","../../node_modules/budoux/module/utils.js","../../node_modules/budoux/module/parser.js","../../src/components/budoux/index.tsx"],"sourcesContent":["export const model = { \"UW3\": { \"、\": 4698, \"。\": 6235, \"の\": 3583, \"に\": 3682, \"は\": 3987, \"を\": 5216, \"が\": 3860, \"と\": 2756, \"も\": 3133, \"る\": 2561, \"で\": 3133, \"っ\": -1796, \"て\": 2238, \"た\": 2076, \"ら\": 1517, \"な\": 2159, \"う\": 1705, \"く\": 2359, \"い\": 1645, \"り\": 1006, \"］\": 2051, \"，\": 3439, \"か\": 1783, \"や\": 2201, \"！\": 3229, \"ば\": 1894, \"？\": 3231, \"．\": 1817, \"…\": 2868, \"ど\": 1783, \"）\": 3421, \"・\": 938, \"ー\": -35, \"ま\": -277, \"へ\": 2227, \"☆\": 2597, \"つ\": 1217, \"日\": 822, \"♪\": 2552, \"ず\": 1661, \"ろ\": 979, \"笑\": 2842, \"だ\": 949, \"」\": 1287, \"ん\": 690, \"京\": -1508, \"間\": 921, \"人\": 670, \"電\": -1496, \"ゃ\": 1309, \"今\": 1118, \"中\": 959, \"分\": 948, \"真\": 741, \"ぐ\": 1573, \"お\": -1189, \"す\": 784, \"々\": 1394, \"０\": -1020, \"度\": 1219, \"き\": 544, \"む\": 1376, \"ッ\": -1190, \"「\": -1279, \"イ\": -431, \"然\": 881, \"大\": -938, \"ぶ\": 1332, \"観\": -1015, \"後\": 984, \"都\": -441, \"ス\": -551, \"１\": -613, \"え\": 699, \"［\": -1052, \"夜\": 1313, \"体\": 909, \"変\": 254, \"昔\": 1610, \"け\": 272, \"〜\": 408, \"フ\": -860, \"一\": -249, \"月\": 704, \"光\": -269, \"年\": 346, \"あ\": 532, \"水\": 407, \"』\": 715, \"ｏ\": -652, \"超\": 775, \"技\": 339, \"★\": 647, \"果\": 542, \"係\": 479, \"方\": 486, \"れ\": 227, \"ぁ\": 537, \"語\": 538, \"＞\": 525, \"グ\": 256, \"題\": 644, \"味\": 345, \"学\": -283, \"み\": 354, \"ド\": -323, \"自\": -375, \"し\": 158, \"ぞ\": 530, \"シ\": -416, \"ン\": -73, \"：\": 274, \"ち\": 200, \"機\": -356, \"カ\": -278, \"メ\": -59, \"色\": 352, \"び\": 245, \"出\": -326, \"ア\": -258, \"ぱ\": 401, \"前\": 235, \"”\": 351, \"ね\": 318, \"頭\": 376, \"感\": 221, \"不\": -224, \"レ\": -188, \"堂\": 316, \"想\": 197, \"生\": -132, \"じ\": 136, \"ざ\": 169, \"屋\": 126, \"　\": 135, \"ぼ\": 139, \"プ\": -105, \"皆\": 148, \"神\": -85, \"め\": 14, \"パ\": -56, \"最\": -61, \"気\": 37, \"週\": 23, \"台\": 78, \"こ\": 18, \"来\": 9 }, \"UW4\": { \"の\": -3485, \"、\": -7199, \"。\": -6700, \"て\": -3636, \"に\": -3918, \"で\": -2671, \"は\": -3210, \"る\": -4636, \"が\": -2823, \"っ\": -3711, \"を\": -4056, \"か\": -2522, \"な\": -1756, \"と\": -2329, \"た\": -1745, \"ら\": -4246, \"こ\": -389, \"し\": -1773, \"い\": -1304, \"り\": -3738, \"れ\": -4040, \"う\": -1833, \"だ\": -2049, \"ん\": -3128, \"ー\": -2685, \"そ\": 36, \"き\": -1993, \"も\": -2441, \"お\": 942, \"く\": -2725, \"ま\": -1294, \"「\": 2362, \"す\": -1168, \"思\": 1444, \"私\": 1865, \"」\": -4983, \"京\": 668, \"人\": 572, \"よ\": -924, \"一\": 541, \"け\": -3268, \"，\": -4129, \"１\": 823, \"！\": -4313, \"行\": 222, \"見\": 568, \"大\": 623, \"さ\": -1477, \"使\": 1017, \"・\": -585, \"（\": 2363, \"今\": 1285, \"ろ\": -2964, \"え\": -1630, \"食\": 453, \"時\": 507, \"み\": -1003, \"ン\": -1947, \"…\": -2878, \"何\": 909, \"じ\": -2413, \"気\": 449, \"わ\": -1323, \"ル\": -1194, \"２\": 686, \"自\": 826, \"ど\": -1068, \"？\": -3024, \"最\": 1487, \"．\": -2805, \"ば\": -2332, \"つ\": -1046, \"べ\": -2524, \"あ\": 173, \"ち\": -1690, \"携\": 342, \"め\": -1558, \"帯\": -1267, \"ず\": -1935, \"や\": -977, \"笑\": -2827, \"せ\": -1403, \"）\": -3199, \"ッ\": -1344, \"』\": -3229, \"ひ\": 571, \"ゃ\": -2196, \"］\": -1306, \"ト\": -450, \"［\": 965, \"ね\": -1443, \"僕\": 1184, \"感\": 222, \"３\": 85, \"不\": 790, \"ぁ\": -1287, \"ょ\": -1465, \"０\": -265, \"”\": -962, \"間\": -359, \"ぎ\": -1098, \"リ\": -662, \"風\": 464, \"実\": 511, \"イ\": -235, \"場\": 430, \"買\": 486, \"多\": 466, \"少\": 491, \"タ\": -533, \"♪\": -1471, \"〜\": -1165, \"以\": 117, \"書\": 349, \"無\": 234, \"ス\": -218, \"飲\": 629, \"高\": 232, \"祭\": 334, \"☆\": -1095, \"ご\": -572, \"楽\": 125, \"子\": -441, \"び\": -936, \"合\": -836, \"ｏ\": -602, \"ぼ\": -837, \"乗\": 151, \"小\": 485, \"新\": 379, \"街\": 472, \"全\": 292, \"的\": -582, \"夏\": 491, \"『\": 617, \"ぶ\": -826, \"ュ\": -517, \"ぜ\": -818, \"込\": -743, \"回\": -717, \"知\": 17, \"相\": 329, \"ぐ\": -645, \"誰\": 557, \"言\": 274, \"ぞ\": -739, \"へ\": -490, \"げ\": -627, \"物\": -206, \"流\": 449, \"三\": 276, \"キ\": 141, \"二\": 196, \"５\": 136, \"道\": 110, \"前\": -78, \"必\": 137, \"結\": 222, \"オ\": 140, \"づ\": -432, \"話\": 160, \"味\": 66, \"通\": -179, \"南\": 479, \"グ\": -199, \"デ\": 111, \"年\": -248, \"四\": 162, \"換\": -124, \"参\": 182, \"真\": -285, \"百\": 161, \"む\": -190, \"写\": 65, \"東\": 120, \"フ\": -53, \"事\": 29, \"＾\": -186, \"友\": 23, \"ラ\": -52, \"返\": -61, \"修\": 70, \"ほ\": -28, \"ム\": -61, \"安\": 46, \"★\": -97, \"素\": 23, \"秋\": 65, \"甘\": 18, \"−\": -13, \"押\": 4 }, \"UW5\": { \"。\": -1588, \"、\": -915, \"な\": -461, \"で\": -907, \"っ\": 1035, \"き\": 884, \"う\": 485, \"に\": -594, \"が\": -546, \"す\": -759, \"と\": -724, \"し\": -297, \"る\": 458, \"く\": 529, \"ん\": 1013, \"え\": 631, \"は\": -652, \"べ\": 1597, \"を\": -565, \"帯\": 413, \"ー\": 94, \"・\": -1020, \"ろ\": -29, \"れ\": 577, \"い\": 363, \"わ\": 595, \"め\": 711, \"の\": -562, \"つ\": 1361, \"た\": 124, \"か\": 202, \"あ\": -182, \"じ\": 701, \"も\": -362, \"ち\": 625, \"日\": 615, \"そ\": -240, \"て\": 355, \"」\": -1124, \"思\": -722, \"だ\": -301, \"！\": -439, \"こ\": 135, \"々\": 947, \"ト\": -535, \"］\": -518, \"ご\": 230, \"ず\": 638, \"年\": 628, \"ル\": -411, \"せ\": -305, \"ぎ\": 668, \"利\": 329, \"分\": 143, \"フ\": 43, \"む\": 551, \"み\": 174, \"使\": -729, \"ょ\": 486, \"体\": -952, \"り\": 158, \"料\": 519, \"電\": -176, \"ゃ\": 256, \"手\": 90, \"田\": 439, \"要\": 127, \"前\": 203, \"寺\": -307, \"．\": -126, \"ど\": -172, \"さ\": -84, \"よ\": -57, \"一\": -130, \"ま\": 58, \"？\": -237, \"び\": 174, \"通\": -112, \"　\": -399, \"タ\": 76, \"学\": 40, \"ぼ\": 265, \"張\": 275, \"先\": -291, \"へ\": -195, \"ば\": 123, \"山\": 72, \"言\": -125, \"的\": -91, \"味\": 48, \"今\": -166, \"行\": -52, \"当\": 71, \"…\": -28, \"葉\": 33, \"テ\": -80, \"Ｎ\": 140, \"ｏ\": 27, \"条\": 9, \"１\": -9, \"）\": -4 }, \"UW2\": { \"、\": -1519, \"。\": -1208, \"の\": -704, \"を\": -1923, \"に\": -1065, \"は\": -865, \"る\": -742, \"も\": -910, \"か\": -78, \"と\": -778, \"ん\": 491, \"ま\": 740, \"て\": -738, \"し\": 109, \"で\": -859, \"が\": -958, \"っ\": 106, \"一\": 1082, \"さ\": 569, \"よ\": 638, \"す\": 211, \"く\": -413, \"う\": -300, \"結\": 1886, \"少\": 578, \"毎\": 1771, \"お\": -720, \"最\": 747, \"だ\": 327, \"同\": 460, \"そ\": -130, \"な\": -378, \"多\": 574, \"全\": 1082, \"り\": -345, \"え\": 234, \"関\": 1116, \"＾\": 636, \"い\": -81, \"ほ\": 470, \"や\": -463, \"ぜ\": 809, \"ひ\": -1506, \"ぱ\": 550, \"「\": -524, \"水\": 645, \"目\": -809, \"話\": 10, \"ら\": -111, \"以\": 1020, \"パ\": 492, \"我\": -1365, \"メ\": -161, \"題\": 1090, \"ね\": 365, \"つ\": -350, \"時\": 143, \"本\": 299, \"今\": 285, \"ば\": -370, \"，\": -653, \"ー\": 167, \"こ\": 87, \"手\": 424, \"当\": 459, \"．\": -510, \"的\": 158, \"あ\": 57, \"良\": 351, \"イ\": -102, \"世\": -1029, \"効\": 590, \"裏\": -1054, \"絶\": 854, \"料\": 230, \"［\": -225, \"取\": -297, \"ゃ\": 112, \"女\": -515, \"た\": -60, \"容\": 398, \"］\": -142, \"々\": 113, \"ラ\": -234, \"…\": 212, \"生\": 143, \"正\": 432, \"立\": -344, \"み\": -61, \"実\": 43, \"打\": 240, \"電\": 101, \"車\": 109, \"早\": 223, \"百\": -273, \"乗\": -201, \"高\": 88, \"感\": 59, \"落\": -255, \"２\": -97, \"３\": -24, \"笑\": -204, \"文\": 124, \"先\": 72, \"和\": 95, \"大\": 23, \"万\": -132, \"友\": 99, \"サ\": -66, \"三\": 41, \"前\": 18, \"甘\": 41, \"違\": 23, \"見\": -4 }, \"UW6\": { \"に\": 301, \"。\": -368, \"う\": -135, \"で\": 81, \"を\": 216, \"て\": -138, \"が\": 197, \"の\": 48, \"は\": 104, \"し\": 348, \"な\": 89, \"さ\": 524, \"た\": -151, \"り\": 285, \"と\": -117, \"ー\": -151, \"寺\": 525, \"ル\": 114, \"や\": 419, \"い\": 221, \"ご\": 487, \"ぱ\": 1190, \"０\": 537, \"っ\": 257, \"か\": 140, \"ん\": 252, \"・\": -427, \"け\": -78, \"ろ\": 39, \"み\": 323, \"め\": 518, \"せ\": 419, \"ま\": 190, \"神\": 704, \"込\": 938, \"気\": 337, \"ば\": 230, \"す\": 109, \"分\": 617, \"思\": -317, \"く\": 121, \"送\": -1163, \"カ\": 266, \"京\": -240, \"こ\": -30, \"、\": 50, \"出\": 256, \"パ\": -472, \"御\": 778, \"的\": 129, \"過\": 701, \"ピ\": 425, \"よ\": 52, \"わ\": 61, \"つ\": 70, \"］\": -80, \"イ\": -65, \"ど\": -35, \"ょ\": -138, \"メ\": 83, \"：\": 20, \"れ\": 39, \"き\": 74, \"び\": 88, \"田\": 214, \"焼\": 161, \"お\": 58, \"日\": 38, \"時\": 67, \"周\": 264, \"る\": 23, \"生\": -66, \"参\": 119, \"Ｓ\": -99, \"方\": -75, \"間\": -37, \"不\": 46, \"ナ\": 42, \"今\": 46, \"へ\": -46, \"じ\": 13, \"切\": 23, \"だ\": -4 }, \"BW2\": { \"とい\": 377, \"てい\": -1247, \"ない\": -2850, \"です\": -2664, \"ので\": -1181, \"であ\": -2914, \"とこ\": -1254, \"、と\": -991, \"にも\": -1195, \"でも\": -1854, \"もし\": -299, \"てお\": -2179, \"とし\": 148, \"には\": -912, \"帯電\": -1479, \"、そ\": -1469, \"てみ\": -1608, \"など\": -1379, \"のよ\": -631, \"たい\": -1673, \"はな\": -305, \"くな\": -1427, \"のだ\": -578, \"でし\": -1633, \"の前\": -944, \"らな\": -346, \"ると\": -637, \"でき\": -1464, \"いも\": 553, \"・・\": -1230, \"もあ\": -590, \"では\": -1433, \"にな\": -292, \"どこ\": -873, \"した\": -607, \"はい\": -759, \"のも\": -692, \"とも\": -520, \"てあ\": -1412, \"うど\": -1005, \"いた\": -599, \"のが\": -630, \"はあ\": -1213, \"てき\": -1139, \"のは\": -554, \"人が\": 903, \"にし\": -265, \"とか\": -686, \"もの\": -411, \"はま\": -581, \"もう\": -678, \"ばい\": -498, \"でな\": -885, \"るの\": -474, \"ても\": -471, \"てく\": -561, \"なか\": -352, \"いま\": -207, \"らい\": -375, \"いと\": -365, \"日本\": -510, \"いい\": -322, \"、清\": -676, \"の１\": -787, \"、１\": -872, \"たも\": 278, \"のか\": -189, \"はず\": -276, \"なあ\": -648, \"てほ\": -349, \"いつ\": -213, \"のみ\": -376, \"と同\": -306, \"スで\": 468, \"なく\": -265, \"はじ\": -289, \"いな\": -106, \"いし\": -194, \"やす\": -247, \"かな\": -134, \"ーな\": 302, \"とき\": -109, \"たち\": -109, \"るよ\": -75, \"うい\": -89, \"なこ\": -69, \"合い\": 60, \"ろう\": -27, \"たし\": -55, \"すご\": -60, \"らし\": -9, \"もち\": -13, \"なぁ\": -4 }, \"BW3\": { \"もの\": 3384, \"いう\": 616, \"よう\": -1413, \"とこ\": 1983, \"こと\": 1066, \"いい\": 989, \"とき\": 2070, \"でも\": 1529, \"して\": 496, \"かけ\": 2869, \"その\": 1842, \"とい\": -1023, \"この\": 1476, \"もう\": 2300, \"そし\": -387, \"なっ\": -381, \"もら\": 2823, \"かか\": 1872, \"ころ\": -321, \"ちょ\": 1734, \"メー\": 150, \"した\": 892, \"ため\": 865, \"はし\": 2262, \"しま\": -90, \"なる\": 240, \"とて\": 1474, \"ある\": -243, \"・・\": -1164, \"から\": -742, \"そう\": -589, \"さん\": -1578, \"まし\": -704, \"どう\": 630, \"いろ\": 383, \"よく\": 1149, \"より\": -1031, \"とも\": 838, \"もん\": 782, \"かっ\": -922, \"ただ\": 1395, \"いて\": -569, \"すぐ\": 1280, \"でき\": 583, \"はま\": 1086, \"これ\": 980, \"すご\": 933, \"しい\": -585, \"とっ\": 575, \"いか\": 400, \"なく\": 422, \"ひと\": 720, \"ない\": 227, \"はず\": 507, \"こそ\": -845, \"どこ\": 832, \"まだ\": 826, \"まあ\": 923, \"わか\": 727, \"いた\": -21, \"だけ\": -697, \"おり\": -1107, \"ます\": -314, \"だっ\": -841, \"しゃ\": 623, \"みた\": -675, \"まっ\": -65, \"また\": 130, \"考え\": 381, \"いの\": -425, \"とり\": 504, \"楽し\": 341, \"いら\": 547, \"あと\": 329, \"かつ\": 395, \"たい\": -211, \"たま\": 324, \"もっ\": 364, \"もと\": 619, \"つい\": 326, \"京都\": 75, \"そこ\": 234, \"った\": -273, \"たっ\": 430, \"祭り\": 295, \"中で\": 222, \"だろ\": -532, \"うま\": 186, \"なん\": 98, \"で、\": 176, \"ずっ\": 406, \"され\": -235, \"出来\": -259, \"ルー\": 299, \"なか\": 84, \"以前\": 272, \"てき\": 296, \"つけ\": 261, \"いる\": 98, \"行き\": -255, \"書い\": 180, \"のも\": 249, \"なに\": 214, \"つな\": 247, \"かも\": -149, \"うか\": -82, \"しく\": -144, \"きる\": -132, \"まぁ\": 99, \"写真\": 89, \"と思\": -70, \"どの\": 46, \"ませ\": -37, \"です\": -18, \"うち\": 9, \"まま\": -4, \"はや\": 4 }, \"BW1\": { \"いう\": 599, \"から\": 1562, \"ない\": 913, \"こと\": -1479, \"とか\": 1621, \"しい\": 820, \"では\": -247, \"うな\": 355, \"とが\": -1237, \"もう\": 1719, \"るの\": -1316, \"。・\": 2399, \"かも\": -840, \"でも\": 733, \"より\": 895, \"んな\": 200, \"んで\": -627, \"れた\": 855, \"が、\": 1449, \"たい\": 411, \"とき\": 1424, \"には\": 578, \"てい\": -814, \"最近\": 982, \"たの\": -1236, \"たら\": 793, \"もの\": -869, \"少し\": 1387, \"ても\": 426, \"うに\": -592, \"だけ\": 591, \"った\": 146, \"とい\": -937, \"その\": -889, \"たと\": -895, \"同じ\": 1407, \"ただ\": 1154, \"にも\": 486, \"こそ\": 1038, \"もし\": 1294, \"れて\": -732, \"この\": -853, \"なら\": 1173, \"ると\": 349, \"は、\": 337, \"よう\": -1059, \"思い\": -1175, \"なぜ\": 1436, \"で、\": 641, \"い、\": -87, \"のは\": 765, \"いの\": -587, \"０円\": 573, \"いた\": 221, \"さん\": 255, \"のが\": 830, \"、と\": 634, \"た．\": 862, \"普段\": 798, \"の時\": 1017, \"大変\": 636, \"くて\": 635, \"と、\": 483, \"のも\": 508, \"とは\": -236, \"パン\": 493, \"て、\": 251, \"の後\": 905, \"ので\": 231, \"まり\": 359, \"いで\": -652, \"えば\": 464, \"の間\": 883, \"やら\": 763, \"とで\": 509, \"うの\": -334, \"てる\": 408, \"る人\": 477, \"ため\": 580, \"使い\": -718, \"との\": 309, \"れば\": 286, \"ころ\": 298, \"けど\": 193, \"の食\": 656, \"使う\": 346, \"一番\": 315, \"現在\": 542, \"買い\": -647, \"なの\": -165, \"たま\": 491, \"に、\": 476, \"ぱり\": 447, \"んと\": -59, \"りと\": 240, \"だし\": 352, \"いも\": -460, \"！！\": 148, \"まだ\": 242, \"的な\": 187, \"。」\": 318, \"んだ\": 213, \"まま\": 307, \"も、\": 168, \"うち\": 196, \"る。\": 80, \"いる\": 20, \"べき\": 353, \"ねー\": 492, \"です\": 129, \"＾＾\": 208, \"わけ\": 251, \"実際\": 266, \"クル\": 236, \"すが\": -78, \"して\": -65, \"取り\": -180, \"どう\": 83, \"気が\": 161, \"にか\": 256, \"きな\": 38, \"める\": -110, \"よく\": 52, \"うと\": -105, \"電車\": 146, \"える\": -46, \"こう\": -84, \"じゃ\": -117, \"か、\": -65, \"とも\": -9, \"な、\": -60, \"見て\": -42, \"らく\": 51, \"きの\": -69, \"、今\": 23, \"てた\": 27, \"ケー\": -32, \"ろう\": -23, \"らと\": -23, \"じて\": 13, \"料理\": 9, \"いか\": -4 }, \"UW1\": { \"い\": -69, \"な\": -187, \"そ\": 253, \"す\": 392, \"に\": -287, \"で\": -92, \"の\": -19, \"ー\": 109, \"が\": -108, \"と\": 18, \"て\": 45, \"は\": -173, \"ち\": 374, \"し\": -64, \"携\": -82, \"だ\": 224, \"ス\": -374, \"ろ\": 247, \"［\": -563, \"く\": 76, \"ん\": 167, \"機\": 431, \"寺\": 509, \"ン\": 172, \"＾\": 641, \"う\": 99, \"り\": -178, \"か\": -63, \"安\": -732, \"あ\": 33, \"外\": 170, \"何\": 312, \"大\": 138, \"自\": 319, \"つ\": 39, \"０\": 39, \"チ\": 330, \"っ\": 71, \"効\": 500, \"ひ\": 131, \"人\": 89, \"ざ\": 401, \"行\": -119, \"．\": -312, \"３\": -286, \"を\": -26, \"や\": -213, \"小\": 200, \"不\": -323, \"ｏ\": -436, \"、\": -35, \"た\": 16, \"ラ\": 102, \"「\": -85, \"居\": 266, \"（\": -130, \"ュ\": 97, \"リ\": 71, \"様\": 287, \"好\": 66, \"見\": 56, \"ツ\": 119, \"生\": 94, \"さ\": -49, \"！\": 24, \"国\": -178, \"オ\": 72, \"ボ\": 158, \"？\": 23, \"庭\": 103, \"料\": 42, \"連\": -93, \"パ\": 51, \"よ\": 9 }, \"TW3\": { \"という\": 737, \"ている\": -1516, \"ところ\": -944, \"、ある\": -2408, \"ること\": -344, \"てしま\": -1571, \"として\": 288, \"らない\": -1196, \"すこと\": 750, \"である\": -995, \"と言っ\": -1172, \"はない\": -323, \"になっ\": -130, \"ていた\": -666, \"、また\": -993, \"ていう\": 556, \"はそれ\": -708, \"であっ\": -751, \"となっ\": 302, \"にして\": -206, \"ばいい\": -440, \"でした\": -243, \"ういう\": -198, \"もいい\": -363, \"とした\": -231, \"］京都\": -200, \"、なん\": -14, \"いくら\": 9 }, \"TW2\": { \"ではな\": -1392, \"気に入\": -3050, \"かもし\": -1010, \"んでい\": -1933, \"そもそ\": -1308, \"とがあ\": -930, \"その後\": -862, \"それ以\": 283, \"でもあ\": -1008, \"しかな\": 439, \"うにな\": -238, \"からな\": -448, \"ともあ\": -529, \"でもな\": -767, \"ってこ\": -89, \"ないと\": -65, \"えてい\": 41, \"とがで\": -65, \"しかし\": -18, \"してお\": -4 }, \"TW1\": { \"という\": 645, \"しかし\": 2177, \"・・・\": 1545, \"ような\": 1249, \"かなり\": 1958, \"やはり\": 1799, \"ながら\": 1400, \"ない、\": -1279, \"かなか\": 899, \"ました\": -410, \"なんと\": -694, \"いたい\": 874, \"ことも\": -243, \"ている\": 104, \"そして\": 553, \"っかり\": 690, \"それは\": -297, \"ひとつ\": 409, \"くらい\": 192, \"ていて\": 211, \"として\": 221, \"ように\": -167, \"に来て\": 354, \"ちろん\": 269, \"ろいろ\": 276, \"００円\": 119, \"くさん\": 149, \"、それ\": 24, \"いった\": 90, \"とんど\": 95, \"ょうど\": 99, \"メール\": 32, \"らない\": 23, \"ことは\": -23 }, \"TW4\": { \"の京都\": 3137, \"ところ\": 1360, \"くらい\": 1922, \"かなり\": 2037, \"ことが\": -979, \"ことに\": -994, \"って、\": 1932, \"メール\": 367, \"なんか\": 510, \"もちろ\": 1816, \"ない。\": 244, \"ように\": -994, \"こと。\": 737, \"そうで\": -1049, \"しかも\": 1253, \"した。\": -701, \"いろい\": 757, \"ソフト\": 806, \"しかし\": 1040, \"ことで\": 183, \"うどん\": 631, \"でも、\": 733, \"いかな\": 676, \"ような\": -1169, \"だから\": 599, \"ことも\": -518, \"ことを\": 326, \"なんて\": -366, \"しない\": 479, \"いえば\": 499, \"わけで\": -246, \"ことは\": -372, \"ありま\": -203, \"まって\": -271, \"しても\": -360, \"なかな\": 434, \"やって\": 267, \"らしい\": 403, \"いっぱ\": 264, \"観光地\": 197, \"いる。\": 125, \"ないと\": 99, \"言って\": -99, \"なんと\": 104, \"してき\": 71, \"おいし\": 80, \"いけな\": -37, \"すると\": 36, \"すごい\": 23, \"あたり\": -59 } };\n//# sourceMappingURL=ja.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Parses an html string and returns a parsed html document.\n * @param html An HTML string.\n * @returns A Document.\n */\nexport const parseFromString = (html) => {\n    const domparser = new DOMParser();\n    const document = domparser.parseFromString(html, 'text/html');\n    return document;\n};\n//# sourceMappingURL=dom-browser.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst assert = console.assert;\nconst ZWSP = '\\u200B'; // U+200B ZERO WIDTH SPACE\n// We could use `Node.TEXT_NODE` and `Node.ELEMENT_NODE` in a browser context,\n// but we define the same here for Node.js environments.\nconst NodeType = {\n    ELEMENT_NODE: 1,\n    TEXT_NODE: 3,\n};\nconst DomAction = {\n    Inline: 0,\n    Block: 1,\n    Skip: 2,\n    Break: 3,\n};\n/**\n * Determines the action from an element name, as defined in\n * {@link https://html.spec.whatwg.org/multipage/rendering.html HTML Rendering}.\n * See also {@link actionForElement}.\n */\nconst domActions = {\n    // Hidden elements\n    // https://html.spec.whatwg.org/multipage/rendering.html#hidden-elements\n    AREA: DomAction.Skip,\n    BASE: DomAction.Skip,\n    BASEFONT: DomAction.Skip,\n    DATALIST: DomAction.Skip,\n    HEAD: DomAction.Skip,\n    LINK: DomAction.Skip,\n    META: DomAction.Skip,\n    NOEMBED: DomAction.Skip,\n    NOFRAMES: DomAction.Skip,\n    PARAM: DomAction.Skip,\n    RP: DomAction.Skip,\n    SCRIPT: DomAction.Skip,\n    STYLE: DomAction.Skip,\n    TEMPLATE: DomAction.Skip,\n    TITLE: DomAction.Skip,\n    NOSCRIPT: DomAction.Skip,\n    // Flow content\n    // https://html.spec.whatwg.org/multipage/rendering.html#flow-content-3\n    HR: DomAction.Break,\n    // Disable if `white-space: pre`.\n    LISTING: DomAction.Skip,\n    PLAINTEXT: DomAction.Skip,\n    PRE: DomAction.Skip,\n    XMP: DomAction.Skip,\n    // Phrasing content\n    // https://html.spec.whatwg.org/multipage/rendering.html#phrasing-content-3\n    BR: DomAction.Break,\n    RT: DomAction.Skip,\n    // Form controls\n    // https://html.spec.whatwg.org/multipage/rendering.html#form-controls\n    INPUT: DomAction.Skip,\n    SELECT: DomAction.Skip,\n    BUTTON: DomAction.Skip,\n    TEXTAREA: DomAction.Skip,\n    // Other elements where the phrase-based line breaking should be disabled.\n    // https://github.com/google/budoux/blob/main/budoux/skip_nodes.json\n    ABBR: DomAction.Skip,\n    CODE: DomAction.Skip,\n    IFRAME: DomAction.Skip,\n    TIME: DomAction.Skip,\n    VAR: DomAction.Skip,\n};\nconst defaultBlockElements = new Set([\n    // 15.3.2 The page\n    'HTML',\n    'BODY',\n    // 15.3.3 Flow content\n    'ADDRESS',\n    'BLOCKQUOTE',\n    'CENTER',\n    'DIALOG',\n    'DIV',\n    'FIGURE',\n    'FIGCAPTION',\n    'FOOTER',\n    'FORM',\n    'HEADER',\n    'LEGEND',\n    'LISTING',\n    'MAIN',\n    'P',\n    // 15.3.6 Sections and headings\n    'ARTICLE',\n    'ASIDE',\n    'H1',\n    'H2',\n    'H3',\n    'H4',\n    'H5',\n    'H6',\n    'HGROUP',\n    'NAV',\n    'SECTION',\n    // 15.3.7 Lists\n    'DIR',\n    'DD',\n    'DL',\n    'DT',\n    'MENU',\n    'OL',\n    'UL',\n    'LI',\n    // 15.3.8 Tables\n    'TABLE',\n    'CAPTION',\n    'COL',\n    'TR',\n    'TD',\n    'TH',\n    // 15.3.12 The fieldset and legend elements\n    'FIELDSET',\n    // 15.5.4 The details and summary elements\n    'DETAILS',\n    'SUMMARY',\n    // 15.5.12 The marquee element\n    'MARQUEE',\n]);\n/**\n * Determine the action for an element.\n * @param element An element to determine the action for.\n * @returns The {@link domActions} for the element.\n */\nfunction actionForElement(element) {\n    const nodeName = element.nodeName;\n    const action = domActions[nodeName];\n    if (action !== undefined)\n        return action;\n    if (typeof getComputedStyle === 'function') {\n        const style = getComputedStyle(element);\n        switch (style.whiteSpace) {\n            case 'nowrap':\n            case 'pre':\n                return DomAction.Skip;\n        }\n        const display = style.display;\n        if (display)\n            return display === 'inline' ? DomAction.Inline : DomAction.Block;\n        // `display` is an empty string if the element is not connected.\n    }\n    // Use the built-in rules if the `display` property is empty, or if\n    // `getComputedStyle` is missing (e.g., jsdom.)\n    return defaultBlockElements.has(nodeName)\n        ? DomAction.Block\n        : DomAction.Inline;\n}\n/**\n * Represents a \"paragraph\", broken by block boundaries or forced breaks.\n *\n * A CSS\n * {@link https://drafts.csswg.org/css2/#inline-formatting inline formatting context}\n * is usually a \"paragraph\", but it can be broken into multiple paragraphs by\n * forced breaks such as `<br>`.\n */\nclass Paragraph {\n    constructor(element) {\n        this.textNodes = [];\n        this.element = element;\n    }\n    hasText() {\n        return this.textNodes.length > 0;\n    }\n}\n/**\n * Applies the BudouX to the given DOM.\n *\n * This class has following advantages over\n * {@link Parser.applyElement}.\n * * It recognizes paragraphs and applies the BudouX for each\n *   paragraph separately.\n * * It can customize how to insert break opportunities.\n *   See {@link separator} for more details.\n * * It is generally faster and more memory efficient, but the\n *   code size is larger.\n */\nexport class HTMLProcessor {\n    /**\n     * @param parser A BudouX {@link Parser} to compute semantic line breaks.\n     */\n    constructor(parser, options) {\n        /** See {@link HTMLProcessorOptions.separator}. */\n        this.separator = ZWSP;\n        this.parser_ = parser;\n        if (options !== undefined) {\n            if (options.className !== undefined)\n                this.className = options.className;\n            if (options.separator !== undefined)\n                this.separator = options.separator;\n        }\n    }\n    /**\n     * Applies markups for semantic line breaks to the given HTML element.\n     *\n     * It breaks descendant nodes into paragraphs,\n     * and applies the BudouX to each paragraph.\n     * @param element The input element.\n     */\n    applyToElement(element) {\n        for (const block of this.getBlocks(element)) {\n            assert(block.hasText());\n            this.applyToParagraph(block);\n        }\n    }\n    /**\n     * Find paragraphs from a given HTML element.\n     * @param element The root element to find paragraphs.\n     * @param parent The parent {@link Paragraph} if any.\n     * @returns A list of {@link Paragraph}s.\n     */\n    *getBlocks(element, parent) {\n        assert(element.nodeType === NodeType.ELEMENT_NODE);\n        // Skip if it was once applied to this element.\n        if (this.className && element.classList.contains(this.className))\n            return;\n        const action = actionForElement(element);\n        if (action === DomAction.Skip)\n            return;\n        if (action === DomAction.Break) {\n            if (parent && parent.hasText()) {\n                yield parent;\n                parent.textNodes = [];\n            }\n            assert(!element.firstChild);\n            return;\n        }\n        // Determine if this element creates a new inline formatting context, or if\n        // this element belongs to the parent inline formatting context.\n        assert(action === DomAction.Block || action === DomAction.Inline);\n        const isNewBlock = !parent || action === DomAction.Block;\n        const block = isNewBlock ? new Paragraph(element) : parent;\n        // Collect all text nodes in this inline formatting context, while searching\n        // descendant elements recursively.\n        for (const child of element.childNodes) {\n            switch (child.nodeType) {\n                case NodeType.ELEMENT_NODE:\n                    for (const childBlock of this.getBlocks(child, block))\n                        yield childBlock;\n                    break;\n                case NodeType.TEXT_NODE:\n                    block.textNodes.push(child);\n                    break;\n            }\n        }\n        // Apply if this is an inline formatting context.\n        if (isNewBlock && block.hasText())\n            yield block;\n    }\n    /**\n     * Apply the BudouX to the given {@link Paragraph}.\n     * @param paragraph The {@link Paragraph} to apply.\n     */\n    applyToParagraph(paragraph) {\n        const textNodes = paragraph.textNodes;\n        assert(textNodes.length > 0);\n        const texts = textNodes.map(node => node.nodeValue);\n        const text = texts.join('');\n        // No changes if whitespace-only.\n        if (/^\\s*$/.test(text))\n            return;\n        // Split the text into a list of phrases.\n        const phrases = this.parser_.parse(text);\n        assert(phrases.length > 0);\n        assert(phrases.reduce((sum, phrase) => sum + phrase.length, 0) === text.length);\n        // No changes if single phrase.\n        if (phrases.length <= 1)\n            return;\n        // Compute the boundary indices from the list of phrase strings.\n        const boundaries = [];\n        let char_index = 0;\n        for (const phrase of phrases) {\n            assert(phrase.length > 0);\n            char_index += phrase.length;\n            boundaries.push(char_index);\n        }\n        // The break opportunity at the end of a block is not needed. Instead of\n        // removing it, turn it to a sentinel for `splitTextNodesAtBoundaries` by\n        // making it larger than the text length.\n        assert(boundaries[0] > 0);\n        assert(boundaries[boundaries.length - 1] === text.length);\n        ++boundaries[boundaries.length - 1];\n        assert(boundaries.length > 1);\n        this.splitTextNodes(textNodes, boundaries);\n        this.applyBlockStyle(paragraph.element);\n    }\n    /**\n     * Split {@link Text} nodes at the specified boundaries.\n     * @param textNodes A list of {@link Text}.\n     * @param boundaries A list of indices of the text to split at.\n     */\n    splitTextNodes(textNodes, boundaries) {\n        assert(boundaries.length > 0);\n        const textLen = textNodes.reduce((sum, node) => sum + (node.nodeValue ? node.nodeValue.length : 0), 0);\n        // The last boundary must be a sentinel.\n        assert(boundaries[boundaries.length - 1] > textLen);\n        let boundary_index = 0;\n        let boundary = boundaries[0];\n        assert(boundary > 0);\n        let nodeStart = 0; // the start index of the `nodeText` in the whole text.\n        for (const node of textNodes) {\n            const nodeText = node.nodeValue;\n            if (!nodeText)\n                continue;\n            // Check if the next boundary is in this `node`.\n            const nodeEnd = nodeStart + nodeText.length;\n            if (boundary >= nodeEnd) {\n                nodeStart = nodeEnd;\n                continue;\n            }\n            // Compute the boundary indices in the `nodeText`.\n            const chunks = [];\n            let chunkStartInNode = 0;\n            while (boundary < nodeEnd) {\n                const boundaryInNode = boundary - nodeStart;\n                assert(boundaryInNode >= chunkStartInNode);\n                chunks.push(nodeText.substring(chunkStartInNode, boundaryInNode));\n                chunkStartInNode = boundaryInNode;\n                ++boundary_index;\n                assert(boundaries[boundary_index] > boundary);\n                boundary = boundaries[boundary_index];\n            }\n            assert(chunks.length > 0);\n            // Add the rest of the `nodeText` and split the `node`.\n            if (chunkStartInNode < nodeText.length)\n                chunks.push(nodeText.substring(chunkStartInNode));\n            this.splitTextNode(node, chunks);\n            nodeStart = nodeEnd;\n        }\n        // Check if all nodes and boundaries are consumed.\n        assert(nodeStart === textLen);\n        assert(boundary_index < boundaries.length);\n        assert(boundaries[boundary_index] >= textLen);\n    }\n    /**\n     * Split a {@link Text} node in the same way as the given chunks.\n     * @param node A {@link Text} node to split.\n     * @param chunks A list of {@link string} specifying where to split.\n     * Joining all {@link chunks} must be equal to {@link node.nodeValue}.\n     */\n    splitTextNode(node, chunks) {\n        assert(chunks.length > 1);\n        assert(node.nodeValue === chunks.join(''));\n        const separator = this.separator;\n        if (typeof separator === 'string') {\n            // If the `separator` is a string, insert it at each boundary.\n            node.nodeValue = chunks.join(separator);\n            return;\n        }\n        // Otherwise create a `Text` node for each chunk, with the separator node\n        // between them, and replace the `node` with them.\n        const document = node.ownerDocument;\n        let nodes = [];\n        for (const chunk of chunks) {\n            if (chunk)\n                nodes.push(document.createTextNode(chunk));\n            nodes.push(null);\n        }\n        nodes.pop();\n        nodes = nodes.map(n => (n ? n : separator.cloneNode(true)));\n        node.replaceWith(...nodes);\n    }\n    /**\n     * Applies the block style to the given element.\n     * @param element The element to apply the block style.\n     */\n    applyBlockStyle(element) {\n        if (this.className) {\n            element.classList.add(this.className);\n            return;\n        }\n        const style = element.style;\n        style.wordBreak = 'keep-all';\n        style.overflowWrap = 'break-word';\n    }\n}\n//# sourceMappingURL=html_processor.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Finds the sum of the numbers in the list.\n * @param arr The list of numbers.\n * @returns The sum.\n */\nexport const sum = (arr) => arr.reduce((prev, curr) => prev + curr, 0);\n/** The separator string to specify breakpoints. */\nexport const SEP = '▁';\n/** The invalid feature string. */\nexport const INVALID = '▔';\n//# sourceMappingURL=utils.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { model as jaModel } from './data/models/ja.js';\nimport { model as zhHansModel } from './data/models/zh-hans.js';\nimport { model as zhHantModel } from './data/models/zh-hant.js';\nimport { parseFromString } from './dom.js';\nimport { HTMLProcessor } from './html_processor.js';\nimport { sum } from './utils.js';\n// We could use `Node.TEXT_NODE` and `Node.ELEMENT_NODE` in a browser context,\n// but we define the same here for Node.js environments.\nconst NODETYPE = {\n    ELEMENT: 1,\n    TEXT: 3,\n};\nexport class Parser {\n    constructor(model) {\n        this.model = new Map(Object.entries(model).map(([k, v]) => [k, new Map(Object.entries(v))]));\n    }\n    /**\n     * Checks if the given element has a text node in its children.\n     *\n     * @param ele An element to be checked.\n     * @returns Whether the element has a child text node.\n     */\n    static hasChildTextNode(ele) {\n        for (const child of ele.childNodes) {\n            if (child.nodeType === NODETYPE.TEXT)\n                return true;\n        }\n        return false;\n    }\n    /**\n     * Parses the input sentence and returns a list of semantic chunks.\n     *\n     * @param sentence An input sentence.\n     * @returns The retrieved chunks.\n     */\n    parse(sentence) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n        if (sentence === '')\n            return [];\n        const result = [sentence[0]];\n        const baseScore = -0.5 *\n            sum([...this.model.values()].map(group => [...group.values()]).flat());\n        for (let i = 1; i < sentence.length; i++) {\n            let score = baseScore;\n            score += ((_a = this.model.get('UW1')) === null || _a === void 0 ? void 0 : _a.get(sentence.slice(i - 3, i - 2))) || 0;\n            score += ((_b = this.model.get('UW2')) === null || _b === void 0 ? void 0 : _b.get(sentence.slice(i - 2, i - 1))) || 0;\n            score += ((_c = this.model.get('UW3')) === null || _c === void 0 ? void 0 : _c.get(sentence.slice(i - 1, i))) || 0;\n            score += ((_d = this.model.get('UW4')) === null || _d === void 0 ? void 0 : _d.get(sentence.slice(i, i + 1))) || 0;\n            score += ((_e = this.model.get('UW5')) === null || _e === void 0 ? void 0 : _e.get(sentence.slice(i + 1, i + 2))) || 0;\n            score += ((_f = this.model.get('UW6')) === null || _f === void 0 ? void 0 : _f.get(sentence.slice(i + 2, i + 3))) || 0;\n            score += ((_g = this.model.get('BW1')) === null || _g === void 0 ? void 0 : _g.get(sentence.slice(i - 2, i))) || 0;\n            score += ((_h = this.model.get('BW2')) === null || _h === void 0 ? void 0 : _h.get(sentence.slice(i - 1, i + 1))) || 0;\n            score += ((_j = this.model.get('BW3')) === null || _j === void 0 ? void 0 : _j.get(sentence.slice(i, i + 2))) || 0;\n            score += ((_k = this.model.get('TW1')) === null || _k === void 0 ? void 0 : _k.get(sentence.slice(i - 3, i))) || 0;\n            score += ((_l = this.model.get('TW2')) === null || _l === void 0 ? void 0 : _l.get(sentence.slice(i - 2, i + 1))) || 0;\n            score += ((_m = this.model.get('TW3')) === null || _m === void 0 ? void 0 : _m.get(sentence.slice(i - 1, i + 2))) || 0;\n            score += ((_o = this.model.get('TW4')) === null || _o === void 0 ? void 0 : _o.get(sentence.slice(i, i + 3))) || 0;\n            if (score > 0)\n                result.push('');\n            result[result.length - 1] += sentence[i];\n        }\n        return result;\n    }\n    /**\n     * Applies markups for semantic line breaks to the given HTML element.\n     * @param parentElement The input element.\n     */\n    applyElement(parentElement) {\n        const htmlProcessor = new HTMLProcessor(this, {\n            separator: parentElement.ownerDocument.createElement('wbr'),\n        });\n        htmlProcessor.applyToElement(parentElement);\n    }\n    /**\n     * Translates the given HTML string to another HTML string with markups\n     * for semantic line breaks.\n     * @param html An input html string.\n     * @returns The translated HTML string.\n     */\n    translateHTMLString(html) {\n        if (html === '')\n            return html;\n        const doc = parseFromString(html);\n        if (Parser.hasChildTextNode(doc.body)) {\n            const wrapper = doc.createElement('span');\n            wrapper.append(...doc.body.childNodes);\n            doc.body.append(wrapper);\n        }\n        this.applyElement(doc.body.childNodes[0]);\n        return doc.body.innerHTML;\n    }\n}\n/**\n * Loads a parser equipped with the default Japanese model.\n * @returns A parser with the default Japanese model.\n */\nexport const loadDefaultJapaneseParser = () => {\n    return new Parser(jaModel);\n};\n/**\n * Loads a parser equipped with the default Simplified Chinese model.\n * @returns A parser with the default Simplified Chinese model.\n */\nexport const loadDefaultSimplifiedChineseParser = () => {\n    return new Parser(zhHansModel);\n};\n/**\n * Loads a parser equipped with the default Traditional Chinese model.\n * @returns A parser with the default Traditional Chinese model.\n */\nexport const loadDefaultTraditionalChineseParser = () => {\n    return new Parser(zhHantModel);\n};\n/**\n * Loads available default parsers.\n * @returns A map between available lang codes and their default parsers.\n */\nexport const loadDefaultParsers = () => {\n    return new Map([\n        ['ja', loadDefaultJapaneseParser()],\n        ['zh-hans', loadDefaultSimplifiedChineseParser()],\n        ['zh-hant', loadDefaultTraditionalChineseParser()],\n    ]);\n};\n//# sourceMappingURL=parser.js.map","import { loadDefaultJapaneseParser } from \"budoux\";\nimport { forwardRef, Fragment, memo, useMemo } from \"react\";\n\nimport * as styles from \"./styles.css\";\n\nimport type { FC, ComponentPropsWithoutRef } from \"react\";\n\nexport type BudouxProps = Omit<ComponentPropsWithoutRef<\"span\">, \"children\" | \"className\" | \"style\"> & {\n  children: string;\n};\n\nconst parser = loadDefaultJapaneseParser();\nconst Budoux = forwardRef<HTMLSpanElement, BudouxProps>(({ children, ...props }, ref) => {\n  const texts = useMemo(() => (children.length > 0 ? parser.parse(children) : []), [children]);\n\n  return (\n    <span {...props} ref={ref} className={styles.budouxRoot}>\n      {texts.map((text, idx) => (\n        <Fragment key={idx}>\n          {text}\n          {texts.length === idx - 1 ? null : <wbr />}\n        </Fragment>\n      ))}\n    </span>\n  );\n}) satisfies FC<BudouxProps>;\n\nexport default memo(Budoux);\n"],"names":["model","parseFromString","__name","html","assert","ZWSP","NodeType","DomAction","domActions","defaultBlockElements","actionForElement","element","nodeName","action","style","display","Paragraph","HTMLProcessor","parser","options","block","parent","isNewBlock","child","childBlock","paragraph","textNodes","text","node","phrases","sum","phrase","boundaries","char_index","textLen","boundary_index","boundary","nodeStart","nodeText","nodeEnd","chunks","chunkStartInNode","boundaryInNode","separator","document","nodes","chunk","arr","prev","curr","NODETYPE","Parser","k","v","ele","sentence","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","result","baseScore","group","i","score","parentElement","doc","wrapper","loadDefaultJapaneseParser","jaModel","Budoux","forwardRef","children","props","ref","texts","useMemo","jsx","styles.budouxRoot","idx","jsxs","Fragment","Budoux$1","memo"],"mappings":"oLAAO,MAAMA,EAAQ,CAAE,IAAO,CAAE,IAAK,KAAM,IAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,MAAO,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,IAAK,KAAM,IAAK,KAAM,EAAK,KAAM,EAAK,KAAM,IAAK,KAAM,EAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,EAAK,KAAM,IAAK,KAAM,IAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,IAAK,KAAM,EAAK,KAAM,EAAK,IAAK,IAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,IAAK,KAAM,EAAK,IAAK,EAAK,MAAO,EAAK,IAAK,EAAK,IAAK,EAAK,MAAO,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,MAAO,EAAK,IAAK,EAAK,KAAM,IAAK,MAAO,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,MAAO,IAAK,MAAO,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,MAAO,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,IAAK,KAAM,EAAK,IAAK,IAAK,MAAO,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,IAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,CAAC,EAAI,IAAO,CAAE,EAAK,MAAO,IAAK,MAAO,IAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,KAAM,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,GAAI,EAAK,MAAO,EAAK,MAAO,EAAK,IAAK,EAAK,MAAO,EAAK,MAAO,IAAK,KAAM,EAAK,MAAO,EAAK,KAAM,EAAK,KAAM,IAAK,MAAO,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,MAAO,IAAK,MAAO,IAAK,IAAK,IAAK,MAAO,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,MAAO,EAAK,KAAM,IAAK,KAAM,IAAK,KAAM,EAAK,KAAM,EAAK,MAAO,EAAK,MAAO,EAAK,IAAK,EAAK,IAAK,EAAK,MAAO,EAAK,MAAO,IAAK,MAAO,EAAK,IAAK,EAAK,MAAO,EAAK,IAAK,EAAK,MAAO,EAAK,MAAO,IAAK,IAAK,EAAK,IAAK,EAAK,MAAO,IAAK,MAAO,EAAK,KAAM,IAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,IAAK,EAAK,MAAO,EAAK,IAAK,EAAK,MAAO,EAAK,MAAO,EAAK,MAAO,EAAK,KAAM,EAAK,MAAO,EAAK,MAAO,IAAK,MAAO,EAAK,MAAO,IAAK,MAAO,EAAK,IAAK,EAAK,MAAO,IAAK,MAAO,EAAK,KAAM,IAAK,IAAK,EAAK,MAAO,EAAK,KAAM,EAAK,IAAK,IAAK,GAAI,EAAK,IAAK,EAAK,MAAO,EAAK,MAAO,IAAK,KAAM,IAAK,KAAM,EAAK,KAAM,EAAK,MAAO,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,IAAK,MAAO,IAAK,MAAO,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,IAAK,MAAO,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,IAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,GAAI,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,GAAI,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,EAAK,GAAI,IAAK,KAAM,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,EAAK,GAAI,IAAK,IAAK,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,IAAK,IAAK,EAAK,CAAC,EAAI,IAAO,CAAE,IAAK,MAAO,IAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,GAAI,IAAK,MAAO,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,IAAK,MAAO,EAAK,KAAM,EAAK,KAAM,IAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,IAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,IAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,GAAI,IAAK,KAAM,EAAK,IAAK,EAAK,KAAM,IAAK,KAAM,EAAK,GAAI,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,GAAI,EAAK,KAAM,EAAK,IAAK,EAAK,GAAI,EAAK,KAAM,EAAK,IAAK,EAAK,GAAI,IAAK,IAAK,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,EAAK,GAAI,EAAK,EAAG,IAAK,GAAI,IAAK,EAAI,EAAE,IAAO,CAAE,IAAK,MAAO,IAAK,MAAO,EAAK,KAAM,EAAK,MAAO,EAAK,MAAO,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,IAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,MAAO,EAAK,IAAK,IAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,GAAI,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,MAAO,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,IAAK,KAAM,EAAK,IAAK,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,IAAK,KAAM,EAAK,IAAK,EAAK,GAAI,EAAK,IAAK,EAAK,KAAM,EAAK,MAAO,EAAK,IAAK,EAAK,MAAO,EAAK,IAAK,EAAK,IAAK,IAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,IAAK,KAAM,EAAK,IAAK,EAAK,KAAM,IAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,GAAI,EAAK,GAAI,EAAK,KAAM,IAAK,IAAK,IAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,KAAM,EAAK,GAAI,EAAK,IAAK,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,IAAM,IAAO,CAAE,EAAK,IAAK,IAAK,KAAM,EAAK,KAAM,EAAK,GAAI,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,EAAK,GAAI,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,IAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,IAAK,KAAM,EAAK,IAAK,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,MAAO,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,IAAK,GAAI,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,IAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,GAAI,IAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,IAAK,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,IAAK,EAAK,GAAI,EAAK,GAAI,EAAK,EAAI,EAAE,IAAO,CAAE,GAAM,IAAK,GAAM,MAAO,GAAM,MAAO,GAAM,MAAO,GAAM,MAAO,GAAM,MAAO,GAAM,MAAO,KAAM,KAAM,GAAM,MAAO,GAAM,MAAO,GAAM,KAAM,GAAM,MAAO,GAAM,IAAK,GAAM,KAAM,GAAM,MAAO,KAAM,MAAO,GAAM,MAAO,GAAM,MAAO,GAAM,KAAM,GAAM,MAAO,GAAM,KAAM,GAAM,MAAO,GAAM,KAAM,GAAM,MAAO,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,MAAO,GAAM,IAAK,KAAM,MAAO,GAAM,KAAM,GAAM,MAAO,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,MAAO,GAAM,MAAO,GAAM,KAAM,GAAM,KAAM,GAAM,MAAO,GAAM,MAAO,GAAM,KAAM,GAAM,IAAK,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,GAAM,IAAK,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,IAAK,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,IAAK,GAAM,KAAM,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,GAAI,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,GAAI,GAAM,IAAK,GAAM,EAAI,EAAE,IAAO,CAAE,GAAM,KAAM,GAAM,IAAK,GAAM,MAAO,GAAM,KAAM,GAAM,KAAM,GAAM,IAAK,GAAM,KAAM,GAAM,KAAM,GAAM,IAAK,GAAM,KAAM,GAAM,KAAM,GAAM,MAAO,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,KAAM,KAAM,MAAO,GAAM,KAAM,GAAM,KAAM,GAAM,MAAO,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,MAAO,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,MAAO,GAAM,KAAM,GAAM,KAAM,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,GAAI,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,GAAI,KAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,KAAM,GAAM,IAAK,GAAM,GAAI,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,GAAI,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,KAAM,GAAM,KAAM,GAAM,GAAI,GAAM,GAAI,GAAM,IAAK,GAAM,GAAI,GAAM,IAAK,GAAM,IAAK,GAAM,EAAG,GAAM,GAAI,GAAM,CAAG,EAAE,IAAO,CAAE,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,MAAO,GAAM,KAAM,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,MAAO,GAAM,KAAM,GAAM,MAAO,KAAM,KAAM,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,KAAM,KAAM,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,MAAO,GAAM,IAAK,GAAM,KAAM,GAAM,KAAM,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,IAAK,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,IAAK,KAAM,IAAK,GAAM,MAAO,GAAM,MAAO,GAAM,KAAM,KAAM,IAAK,KAAM,IAAK,GAAM,IAAK,GAAM,KAAM,KAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,KAAM,IAAK,KAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,KAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,KAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,KAAM,GAAM,IAAK,KAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,KAAM,IAAK,GAAM,IAAK,GAAM,IAAK,KAAM,IAAK,GAAM,IAAK,GAAM,IAAK,KAAM,IAAK,GAAM,IAAK,KAAM,GAAI,GAAM,GAAI,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,KAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,GAAM,GAAI,GAAM,IAAK,GAAM,IAAK,GAAM,GAAI,GAAM,KAAM,GAAM,GAAI,GAAM,KAAM,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,KAAM,KAAM,IAAK,GAAM,GAAI,KAAM,IAAK,GAAM,IAAK,GAAM,GAAI,GAAM,IAAK,KAAM,GAAI,GAAM,GAAI,GAAM,IAAK,GAAM,IAAK,GAAM,IAAK,GAAM,GAAI,GAAM,EAAG,GAAM,IAAM,IAAO,CAAE,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,GAAI,EAAK,GAAI,EAAK,KAAM,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,IAAK,KAAM,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,GAAI,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,GAAI,IAAK,GAAI,EAAK,IAAK,EAAK,GAAI,EAAK,IAAK,EAAK,IAAK,EAAK,GAAI,EAAK,IAAK,EAAK,KAAM,IAAK,KAAM,IAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,IAAK,EAAK,KAAM,EAAK,KAAM,IAAK,IAAK,EAAK,GAAI,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,KAAM,EAAK,GAAI,EAAK,GAAI,EAAK,IAAK,EAAK,GAAI,EAAK,GAAI,EAAK,IAAK,EAAK,GAAI,EAAK,IAAK,IAAK,GAAI,EAAK,KAAM,EAAK,GAAI,EAAK,IAAK,IAAK,GAAI,EAAK,IAAK,EAAK,GAAI,EAAK,IAAK,EAAK,GAAI,EAAK,CAAC,EAAI,IAAO,CAAE,IAAO,IAAK,IAAO,MAAO,IAAO,KAAM,MAAO,MAAO,IAAO,KAAM,IAAO,MAAO,IAAO,IAAK,IAAO,MAAO,IAAO,IAAK,IAAO,KAAM,IAAO,MAAO,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,MAAO,KAAM,IAAO,IAAK,IAAO,KAAM,IAAO,KAAM,IAAO,IAAK,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,MAAO,KAAM,MAAO,IAAK,IAAO,CAAC,EAAI,IAAO,CAAE,IAAO,MAAO,IAAO,MAAO,IAAO,MAAO,IAAO,MAAO,IAAO,MAAO,IAAO,KAAM,IAAO,KAAM,IAAO,IAAK,IAAO,MAAO,IAAO,IAAK,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,IAAK,IAAO,IAAK,IAAO,GAAI,IAAO,IAAK,IAAO,IAAK,IAAO,IAAM,IAAO,CAAE,IAAO,IAAK,IAAO,KAAM,MAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,MAAO,MAAO,IAAO,IAAK,IAAO,KAAM,IAAO,KAAM,IAAO,IAAK,IAAO,KAAM,IAAO,IAAK,IAAO,IAAK,IAAO,IAAK,IAAO,KAAM,IAAO,IAAK,IAAO,IAAK,IAAO,IAAK,IAAO,IAAK,IAAO,KAAM,IAAO,IAAK,IAAO,IAAK,IAAO,IAAK,MAAO,IAAK,IAAO,IAAK,MAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAK,EAAE,IAAO,CAAE,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,MAAO,KAAM,IAAO,IAAK,IAAO,IAAK,IAAO,KAAM,MAAO,IAAK,IAAO,KAAM,MAAO,IAAK,IAAO,MAAO,IAAO,KAAM,MAAO,KAAM,IAAO,IAAK,IAAO,IAAK,IAAO,KAAM,IAAO,IAAK,IAAO,IAAK,MAAO,IAAK,IAAO,IAAK,IAAO,MAAO,IAAO,IAAK,IAAO,KAAM,IAAO,IAAK,IAAO,KAAM,IAAO,IAAK,IAAO,IAAK,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,IAAK,IAAO,IAAK,IAAO,IAAK,IAAO,IAAK,IAAO,IAAK,MAAO,IAAK,IAAO,GAAI,IAAO,IAAK,IAAO,IAAK,IAAO,GAAI,IAAO,GAAI,IAAO,IAAK,IAAO,GAAI,IAAO,GAAI,IAAO,IAAO,ECA98Z;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAoBO,MAAMC,EAAkBC,EAACC,GACV,IAAI,YACK,gBAAgBA,EAAM,WAAW,EAFjC,mBCpB/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAeA,MAAMC,EAAS,QAAQ,OACjBC,EAAO,IAGPC,EAAW,CACb,aAAc,EACd,UAAW,CACf,EACMC,EAAY,CACd,OAAQ,EACR,MAAO,EACP,KAAM,EACN,MAAO,CACX,EAMMC,EAAa,CAGf,KAAMD,EAAU,KAChB,KAAMA,EAAU,KAChB,SAAUA,EAAU,KACpB,SAAUA,EAAU,KACpB,KAAMA,EAAU,KAChB,KAAMA,EAAU,KAChB,KAAMA,EAAU,KAChB,QAASA,EAAU,KACnB,SAAUA,EAAU,KACpB,MAAOA,EAAU,KACjB,GAAIA,EAAU,KACd,OAAQA,EAAU,KAClB,MAAOA,EAAU,KACjB,SAAUA,EAAU,KACpB,MAAOA,EAAU,KACjB,SAAUA,EAAU,KAGpB,GAAIA,EAAU,MAEd,QAASA,EAAU,KACnB,UAAWA,EAAU,KACrB,IAAKA,EAAU,KACf,IAAKA,EAAU,KAGf,GAAIA,EAAU,MACd,GAAIA,EAAU,KAGd,MAAOA,EAAU,KACjB,OAAQA,EAAU,KAClB,OAAQA,EAAU,KAClB,SAAUA,EAAU,KAGpB,KAAMA,EAAU,KAChB,KAAMA,EAAU,KAChB,OAAQA,EAAU,KAClB,KAAMA,EAAU,KAChB,IAAKA,EAAU,IACnB,EACME,EAAuB,IAAI,IAAI,CAEjC,OACA,OAEA,UACA,aACA,SACA,SACA,MACA,SACA,aACA,SACA,OACA,SACA,SACA,UACA,OACA,IAEA,UACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,SACA,MACA,UAEA,MACA,KACA,KACA,KACA,OACA,KACA,KACA,KAEA,QACA,UACA,MACA,KACA,KACA,KAEA,WAEA,UACA,UAEA,SACJ,CAAC,EAMD,SAASC,EAAiBC,EAAS,CAC/B,MAAMC,EAAWD,EAAQ,SACnBE,EAASL,EAAWI,CAAQ,EAClC,GAAIC,IAAW,OACX,OAAOA,EACX,GAAI,OAAO,kBAAqB,WAAY,CACxC,MAAMC,EAAQ,iBAAiBH,CAAO,EACtC,OAAQG,EAAM,WAAU,CACpB,IAAK,SACL,IAAK,MACD,OAAOP,EAAU,IACxB,CACD,MAAMQ,EAAUD,EAAM,QACtB,GAAIC,EACA,OAAOA,IAAY,SAAWR,EAAU,OAASA,EAAU,KAElE,CAGD,OAAOE,EAAqB,IAAIG,CAAQ,EAClCL,EAAU,MACVA,EAAU,MACpB,CAtBSL,EAAAQ,EAAA,oBA+BT,MAAMM,CAAU,CACZ,YAAYL,EAAS,CACjB,KAAK,UAAY,GACjB,KAAK,QAAUA,CAClB,CACD,SAAU,CACN,OAAO,KAAK,UAAU,OAAS,CAClC,CACL,CARMT,EAAAc,EAAA,aAqBC,MAAMC,CAAc,CAIvB,YAAYC,EAAQC,EAAS,CAEzB,KAAK,UAAYd,EACjB,KAAK,QAAUa,EACXC,IAAY,SACRA,EAAQ,YAAc,SACtB,KAAK,UAAYA,EAAQ,WACzBA,EAAQ,YAAc,SACtB,KAAK,UAAYA,EAAQ,WAEpC,CAQD,eAAeR,EAAS,CACpB,UAAWS,KAAS,KAAK,UAAUT,CAAO,EACtCP,EAAOgB,EAAM,QAAO,CAAE,EACtB,KAAK,iBAAiBA,CAAK,CAElC,CAOD,CAAC,UAAUT,EAASU,EAAQ,CAGxB,GAFAjB,EAAOO,EAAQ,WAAaL,EAAS,YAAY,EAE7C,KAAK,WAAaK,EAAQ,UAAU,SAAS,KAAK,SAAS,EAC3D,OACJ,MAAME,EAASH,EAAiBC,CAAO,EACvC,GAAIE,IAAWN,EAAU,KACrB,OACJ,GAAIM,IAAWN,EAAU,MAAO,CACxBc,GAAUA,EAAO,YACjB,MAAMA,EACNA,EAAO,UAAY,IAEvBjB,EAAO,CAACO,EAAQ,UAAU,EAC1B,MACH,CAGDP,EAAOS,IAAWN,EAAU,OAASM,IAAWN,EAAU,MAAM,EAChE,MAAMe,EAAa,CAACD,GAAUR,IAAWN,EAAU,MAC7Ca,EAAQE,EAAa,IAAIN,EAAUL,CAAO,EAAIU,EAGpD,UAAWE,KAASZ,EAAQ,WACxB,OAAQY,EAAM,SAAQ,CAClB,KAAKjB,EAAS,aACV,UAAWkB,KAAc,KAAK,UAAUD,EAAOH,CAAK,EAChD,MAAMI,EACV,MACJ,KAAKlB,EAAS,UACVc,EAAM,UAAU,KAAKG,CAAK,EAC1B,KACP,CAGDD,GAAcF,EAAM,QAAS,IAC7B,MAAMA,EACb,CAKD,iBAAiBK,EAAW,CACxB,MAAMC,EAAYD,EAAU,UAC5BrB,EAAOsB,EAAU,OAAS,CAAC,EAE3B,MAAMC,EADQD,EAAU,IAAIE,GAAQA,EAAK,SAAS,EAC/B,KAAK,EAAE,EAE1B,GAAI,QAAQ,KAAKD,CAAI,EACjB,OAEJ,MAAME,EAAU,KAAK,QAAQ,MAAMF,CAAI,EAIvC,GAHAvB,EAAOyB,EAAQ,OAAS,CAAC,EACzBzB,EAAOyB,EAAQ,OAAO,CAACC,EAAKC,IAAWD,EAAMC,EAAO,OAAQ,CAAC,IAAMJ,EAAK,MAAM,EAE1EE,EAAQ,QAAU,EAClB,OAEJ,MAAMG,EAAa,CAAA,EACnB,IAAIC,EAAa,EACjB,UAAWF,KAAUF,EACjBzB,EAAO2B,EAAO,OAAS,CAAC,EACxBE,GAAcF,EAAO,OACrBC,EAAW,KAAKC,CAAU,EAK9B7B,EAAO4B,EAAW,CAAC,EAAI,CAAC,EACxB5B,EAAO4B,EAAWA,EAAW,OAAS,CAAC,IAAML,EAAK,MAAM,EACxD,EAAEK,EAAWA,EAAW,OAAS,CAAC,EAClC5B,EAAO4B,EAAW,OAAS,CAAC,EAC5B,KAAK,eAAeN,EAAWM,CAAU,EACzC,KAAK,gBAAgBP,EAAU,OAAO,CACzC,CAMD,eAAeC,EAAWM,EAAY,CAClC5B,EAAO4B,EAAW,OAAS,CAAC,EAC5B,MAAME,EAAUR,EAAU,OAAO,CAACI,EAAKF,IAASE,GAAOF,EAAK,UAAYA,EAAK,UAAU,OAAS,GAAI,CAAC,EAErGxB,EAAO4B,EAAWA,EAAW,OAAS,CAAC,EAAIE,CAAO,EAClD,IAAIC,EAAiB,EACjBC,EAAWJ,EAAW,CAAC,EAC3B5B,EAAOgC,EAAW,CAAC,EACnB,IAAIC,EAAY,EAChB,UAAWT,KAAQF,EAAW,CAC1B,MAAMY,EAAWV,EAAK,UACtB,GAAI,CAACU,EACD,SAEJ,MAAMC,EAAUF,EAAYC,EAAS,OACrC,GAAIF,GAAYG,EAAS,CACrBF,EAAYE,EACZ,QACH,CAED,MAAMC,EAAS,CAAA,EACf,IAAIC,EAAmB,EACvB,KAAOL,EAAWG,GAAS,CACvB,MAAMG,EAAiBN,EAAWC,EAClCjC,EAAOsC,GAAkBD,CAAgB,EACzCD,EAAO,KAAKF,EAAS,UAAUG,EAAkBC,CAAc,CAAC,EAChED,EAAmBC,EACnB,EAAEP,EACF/B,EAAO4B,EAAWG,CAAc,EAAIC,CAAQ,EAC5CA,EAAWJ,EAAWG,CAAc,CACvC,CACD/B,EAAOoC,EAAO,OAAS,CAAC,EAEpBC,EAAmBH,EAAS,QAC5BE,EAAO,KAAKF,EAAS,UAAUG,CAAgB,CAAC,EACpD,KAAK,cAAcb,EAAMY,CAAM,EAC/BH,EAAYE,CACf,CAEDnC,EAAOiC,IAAcH,CAAO,EAC5B9B,EAAO+B,EAAiBH,EAAW,MAAM,EACzC5B,EAAO4B,EAAWG,CAAc,GAAKD,CAAO,CAC/C,CAOD,cAAcN,EAAMY,EAAQ,CACxBpC,EAAOoC,EAAO,OAAS,CAAC,EACxBpC,EAAOwB,EAAK,YAAcY,EAAO,KAAK,EAAE,CAAC,EACzC,MAAMG,EAAY,KAAK,UACvB,GAAI,OAAOA,GAAc,SAAU,CAE/Bf,EAAK,UAAYY,EAAO,KAAKG,CAAS,EACtC,MACH,CAGD,MAAMC,EAAWhB,EAAK,cACtB,IAAIiB,EAAQ,CAAA,EACZ,UAAWC,KAASN,EACZM,GACAD,EAAM,KAAKD,EAAS,eAAeE,CAAK,CAAC,EAC7CD,EAAM,KAAK,IAAI,EAEnBA,EAAM,IAAG,EACTA,EAAQA,EAAM,IAAI,GAAM,GAAQF,EAAU,UAAU,EAAI,CAAE,EAC1Df,EAAK,YAAY,GAAGiB,CAAK,CAC5B,CAKD,gBAAgBlC,EAAS,CACrB,GAAI,KAAK,UAAW,CAChBA,EAAQ,UAAU,IAAI,KAAK,SAAS,EACpC,MACH,CACD,MAAMG,EAAQH,EAAQ,MACtBG,EAAM,UAAY,WAClBA,EAAM,aAAe,YACxB,CACL,CAtMaZ,EAAAe,EAAA,iBC/Lb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAoBO,MAAMa,EAAM5B,EAAC6C,GAAQA,EAAI,OAAO,CAACC,EAAMC,IAASD,EAAOC,EAAM,CAAC,EAAlD,OCpBnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAuBA,MAAMC,EAAW,CACb,QAAS,EACT,KAAM,CACV,EACO,MAAMC,CAAO,CAChB,YAAYnD,EAAO,CACf,KAAK,MAAQ,IAAI,IAAI,OAAO,QAAQA,CAAK,EAAE,IAAI,CAAC,CAACoD,EAAGC,CAAC,IAAM,CAACD,EAAG,IAAI,IAAI,OAAO,QAAQC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC9F,CAOD,OAAO,iBAAiBC,EAAK,CACzB,UAAW/B,KAAS+B,EAAI,WACpB,GAAI/B,EAAM,WAAa2B,EAAS,KAC5B,MAAO,GAEf,MAAO,EACV,CAOD,MAAMK,EAAU,CACZ,IAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EACpD,GAAIb,IAAa,GACb,MAAO,GACX,MAAMc,EAAS,CAACd,EAAS,CAAC,CAAC,EACrBe,EAAY,IACdxC,EAAI,CAAC,GAAG,KAAK,MAAM,OAAM,CAAE,EAAE,IAAIyC,GAAS,CAAC,GAAGA,EAAM,OAAM,CAAE,CAAC,EAAE,KAAM,CAAA,EACzE,QAASC,EAAI,EAAGA,EAAIjB,EAAS,OAAQiB,IAAK,CACtC,IAAIC,EAAQH,EACZG,KAAWjB,EAAK,KAAK,MAAM,IAAI,KAAK,KAAO,MAAQA,IAAO,OAAS,OAASA,EAAG,IAAID,EAAS,MAAMiB,EAAI,EAAGA,EAAI,CAAC,CAAC,IAAM,EACrHC,KAAWhB,EAAK,KAAK,MAAM,IAAI,KAAK,KAAO,MAAQA,IAAO,OAAS,OAASA,EAAG,IAAIF,EAAS,MAAMiB,EAAI,EAAGA,EAAI,CAAC,CAAC,IAAM,EACrHC,KAAWf,EAAK,KAAK,MAAM,IAAI,KAAK,KAAO,MAAQA,IAAO,OAAS,OAASA,EAAG,IAAIH,EAAS,MAAMiB,EAAI,EAAGA,CAAC,CAAC,IAAM,EACjHC,KAAWd,EAAK,KAAK,MAAM,IAAI,KAAK,KAAO,MAAQA,IAAO,OAAS,OAASA,EAAG,IAAIJ,EAAS,MAAMiB,EAAGA,EAAI,CAAC,CAAC,IAAM,EACjHC,KAAWb,EAAK,KAAK,MAAM,IAAI,KAAK,KAAO,MAAQA,IAAO,OAAS,OAASA,EAAG,IAAIL,EAAS,MAAMiB,EAAI,EAAGA,EAAI,CAAC,CAAC,IAAM,EACrHC,KAAWZ,EAAK,KAAK,MAAM,IAAI,KAAK,KAAO,MAAQA,IAAO,OAAS,OAASA,EAAG,IAAIN,EAAS,MAAMiB,EAAI,EAAGA,EAAI,CAAC,CAAC,IAAM,EACrHC,KAAWX,EAAK,KAAK,MAAM,IAAI,KAAK,KAAO,MAAQA,IAAO,OAAS,OAASA,EAAG,IAAIP,EAAS,MAAMiB,EAAI,EAAGA,CAAC,CAAC,IAAM,EACjHC,KAAWV,EAAK,KAAK,MAAM,IAAI,KAAK,KAAO,MAAQA,IAAO,OAAS,OAASA,EAAG,IAAIR,EAAS,MAAMiB,EAAI,EAAGA,EAAI,CAAC,CAAC,IAAM,EACrHC,KAAWT,EAAK,KAAK,MAAM,IAAI,KAAK,KAAO,MAAQA,IAAO,OAAS,OAASA,EAAG,IAAIT,EAAS,MAAMiB,EAAGA,EAAI,CAAC,CAAC,IAAM,EACjHC,KAAWR,EAAK,KAAK,MAAM,IAAI,KAAK,KAAO,MAAQA,IAAO,OAAS,OAASA,EAAG,IAAIV,EAAS,MAAMiB,EAAI,EAAGA,CAAC,CAAC,IAAM,EACjHC,KAAWP,EAAK,KAAK,MAAM,IAAI,KAAK,KAAO,MAAQA,IAAO,OAAS,OAASA,EAAG,IAAIX,EAAS,MAAMiB,EAAI,EAAGA,EAAI,CAAC,CAAC,IAAM,EACrHC,KAAWN,EAAK,KAAK,MAAM,IAAI,KAAK,KAAO,MAAQA,IAAO,OAAS,OAASA,EAAG,IAAIZ,EAAS,MAAMiB,EAAI,EAAGA,EAAI,CAAC,CAAC,IAAM,EACrHC,KAAWL,EAAK,KAAK,MAAM,IAAI,KAAK,KAAO,MAAQA,IAAO,OAAS,OAASA,EAAG,IAAIb,EAAS,MAAMiB,EAAGA,EAAI,CAAC,CAAC,IAAM,EAC7GC,EAAQ,GACRJ,EAAO,KAAK,EAAE,EAClBA,EAAOA,EAAO,OAAS,CAAC,GAAKd,EAASiB,CAAC,CAC1C,CACD,OAAOH,CACV,CAKD,aAAaK,EAAe,CACF,IAAIzD,EAAc,KAAM,CAC1C,UAAWyD,EAAc,cAAc,cAAc,KAAK,CACtE,CAAS,EACa,eAAeA,CAAa,CAC7C,CAOD,oBAAoBvE,EAAM,CACtB,GAAIA,IAAS,GACT,OAAOA,EACX,MAAMwE,EAAM1E,EAAgBE,CAAI,EAChC,GAAIgD,EAAO,iBAAiBwB,EAAI,IAAI,EAAG,CACnC,MAAMC,EAAUD,EAAI,cAAc,MAAM,EACxCC,EAAQ,OAAO,GAAGD,EAAI,KAAK,UAAU,EACrCA,EAAI,KAAK,OAAOC,CAAO,CAC1B,CACD,YAAK,aAAaD,EAAI,KAAK,WAAW,CAAC,CAAC,EACjCA,EAAI,KAAK,SACnB,CACL,CA/EazE,EAAAiD,EAAA,UAoFN,MAAM0B,EAA4B3E,EAAA,IAC9B,IAAIiD,EAAO2B,CAAO,EADY,6CCpGzC,MAAA5D,EAAA2D,EAAA,EACAE,EAAAC,EAAA,WAAA,CAAA,CAAA,SAAAC,EAAA,GAAAC,CAAA,EAAAC,IAAA,CACE,MAAAC,EAAAC,EAAA,QAAA,IAAAJ,EAAA,OAAA,EAAA/D,EAAA,MAAA+D,CAAA,EAAA,CAAA,EAAA,CAAAA,CAAA,CAAA,EAEA,OAAAK,EAAA,OAAA,CAAA,GAAAJ,EAAA,IAAAC,EAAA,UAAAI,EAAA,SAAAH,EAAA,IAAA,CAAAzD,EAAA6D,IAAAC,EAAAC,EAAAA,SAAA,CAAA,SAAA,CAIS/D,EAAAyD,EAAA,SAAAI,EAAA,EAAA,KAAAF,EAAA,MAAA,EAAA,CACuC,GAAAE,CAAA,CAAA,CAAA,CAAA,CAKlD,CAAA,EAEAG,EAAAC,EAAA,KAAAb,CAAA","x_google_ignoreList":[0,1,2,3,4]}